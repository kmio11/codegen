// Code generated by "mock"; DO NOT EDIT.
// Mock for github.com/kmio11/codegen/_examples/mock.Calculator
package mock

type MockCalculator struct {
	Calculator
	FakeAdd      func(a int, b int) int
	FakeDivide   func(a int, b int) (int, error)
	FakeMultiply func(a int, b int) int
	FakeSubtract func(a int, b int) int
}

func (m *MockCalculator) Add(a0 int, a1 int) int {
	return m.FakeAdd(a0, a1)
}

func (m *MockCalculator) Divide(a0 int, a1 int) (int, error) {
	return m.FakeDivide(a0, a1)
}

func (m *MockCalculator) Multiply(a0 int, a1 int) int {
	return m.FakeMultiply(a0, a1)
}

func (m *MockCalculator) Subtract(a0 int, a1 int) int {
	return m.FakeSubtract(a0, a1)
}

type StubCalculator struct {
	Add      StubAdd
	Divide   StubDivide
	Multiply StubMultiply
	Subtract StubSubtract
}

func (s *StubCalculator) NewMock() Calculator {
	return &MockCalculator{FakeAdd: s.FakeAdd, FakeDivide: s.FakeDivide, FakeMultiply: s.FakeMultiply, FakeSubtract: s.FakeSubtract}
}

func (s *StubCalculator) FakeAdd(a0 int, a1 int) int {
	return s.Add.R0
}

func (s *StubCalculator) FakeDivide(a0 int, a1 int) (int, error) {
	return s.Divide.R0, s.Divide.R1
}

func (s *StubCalculator) FakeMultiply(a0 int, a1 int) int {
	return s.Multiply.R0
}

func (s *StubCalculator) FakeSubtract(a0 int, a1 int) int {
	return s.Subtract.R0
}

type StubAdd struct {
	R0 int
}

type StubDivide struct {
	R0 int
	R1 error
}

type StubMultiply struct {
	R0 int
}

type StubSubtract struct {
	R0 int
}
