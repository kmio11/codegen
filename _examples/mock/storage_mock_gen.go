// Code generated by "mock"; DO NOT EDIT.
// Mock for github.com/kmio11/codegen/_examples/mock.Storage
package mock

type MockStorage[K comparable, V any] struct {
	Storage[K, V]
	FakeDelete func(key K)
	FakeGet    func(key K) (V, bool)
	FakeList   func() []K
	FakeSet    func(key K, value V)
}

func (m *MockStorage[K, V]) Delete(a0 K) {
	m.FakeDelete(a0)
}

func (m *MockStorage[K, V]) Get(a0 K) (V, bool) {
	return m.FakeGet(a0)
}

func (m *MockStorage[K, V]) List() []K {
	return m.FakeList()
}

func (m *MockStorage[K, V]) Set(a0 K, a1 V) {
	m.FakeSet(a0, a1)
}

type StubStorage[K comparable, V any] struct {
	Delete StubDelete[K, V]
	Get    StubGet[K, V]
	List   StubList[K, V]
	Set    StubSet[K, V]
}

func (s *StubStorage[K, V]) NewMock() Storage[K, V] {
	return &MockStorage[K, V]{FakeDelete: s.FakeDelete, FakeGet: s.FakeGet, FakeList: s.FakeList, FakeSet: s.FakeSet}
}

func (s *StubStorage[K, V]) FakeDelete(a0 K) {
	return
}

func (s *StubStorage[K, V]) FakeGet(a0 K) (V, bool) {
	return s.Get.R0, s.Get.R1
}

func (s *StubStorage[K, V]) FakeList() []K {
	return s.List.R0
}

func (s *StubStorage[K, V]) FakeSet(a0 K, a1 V) {
	return
}

type StubDelete[K comparable, V any] struct {
}

type StubGet[K comparable, V any] struct {
	R0 V
	R1 bool
}

type StubList[K comparable, V any] struct {
	R0 []K
}

type StubSet[K comparable, V any] struct {
}
